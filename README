# Projet EgaPro

## Objectifs du Projet
Ce projet a pour but de développer une architecture de services pour distribuer les données de l'Index EgaPro.

## Membres de l'Équipe
- Dorian TARDIEU
- Neil TUJAGUE
- Yanis LAMBOURG

## Diagramme de Séquence
[Diagramme de Séquence](https://www.plantuml.com/plantuml/png/tPJDJW8n58NtVOeRzeQboi90O68q1iWCFa2TkT4cfQtzuPtmDNWnRo-BPiQ9ch2306rkJpyEvmJc8KeVqruB8TjeFRm6zCBHJBNAIHDXijGAQQshPZS16NXpdetgcirYoxgy-KLNRvSietLCjL9jLDOOgJoUTHYIZa9aWt3p0CN635QubwP3o4-wSpfY06UJX-QfhjPmUtSljBKE5iwX1fc060VL8aC4qAFGcCsVDOF7QWVJG0xCb1WivAEUQEUbYhZFLpi4BS7ZPpfzHHpNqzf-eASNoKFnMxtBhRT3s-E85snZyWD0Xowfa0syoT3BeaSPH5UVZiuQqZytcpN80xQWVzeIQBeIFJTxOVGCOME5ra-9Gpphs5SXNaqHvQkN8dZuloBujtDf3yHWMymQji3gV7Ij3PG4Im4q-oF_ERtd_ynl)

## Services Développés

### Service RPC

**Description :**
Ce service distribue les données EgaPro via RPC (Remote Procedure Call). Ce type de service permet aux clients d'appeler des méthodes sur un serveur distant comme s'il s'agissait de méthodes locales.

**Code Source :**


import rpyc

class EgaProService(rpyc.Service):
    def exposed_get_data(self, siren):
        with open("index-egalite-fh-utf8.csv", encoding="utf-8") as csv_file:
            reader = DictReader(csv_file, delimiter=";", quotechar='"')
            for row in reader:
                if row["SIREN"] == siren:
                    return row
        return None

if __name__ == "__main__":
    from rpyc.utils.server import ThreadedServer
    server = ThreadedServer(EgaProService, port=18861)
    print("RPC server running on port 18861")
    server.start()


### Service REST

**Description :**
Ce service distribue les données EgaPro via une API REST. Les données sont renvoyées en format JSON.

**Code Source :**
# service_rest.py
from csv import DictReader
from flask import Flask, jsonify

app = Flask(__name__)

egapro_data = {}

# Lecture des données depuis le fichier CSV lors du chargement de l'application
with open("index-egalite-fh-utf8.csv", encoding="utf-8") as csv_file:
    reader = DictReader(csv_file, delimiter=";", quotechar='"')
    for row in reader:
        if egapro_data.get(row["SIREN"]) is None:
            egapro_data[row["SIREN"]] = row
        elif egapro_data[row["SIREN"]]["Année"] < row["Année"]:
            egapro_data[row["SIREN"]].update(row)

@app.route("/api/siren/<int:siren>", methods=["GET"])
def get_data_by_siren(siren):
    data = egapro_data.get(str(siren))
    if not data:
        return jsonify({"error": "SIREN not found"}), 404
    return jsonify(data), 200

if __name__ == "__main__":
    app.run(debug=True)

**Documentation :**

**Endpoint REST :** /siren/<siren>
**Méthode :** GET
**Paramètres :**
**siren (int) :** Le numéro SIREN de l'entreprise dont on souhaite obtenir les données.
**Réponse:** {
  "siren": "123456789",
  "data": {
    "indexEgaPro": 85,
    "details": {
      "indicator1": 95,
      "indicator2": 75,
      ...
    }
  }
}
**Service SOAP**
**Description :**
Ce service distribue les données EgaPro via une API SOAP. Les données sont renvoyées en format XML.

from spyne import Application, rpc, ServiceBase, Integer, Unicode
from spyne.protocol.soap import Soap11
from spyne.server.wsgi import WsgiApplication
from csv import DictReader

egapro_data = {}

with open("index-egalite-fh-utf8.csv") as csv:
    reader = DictReader(csv, delimiter=";", quotechar='"')
    for row in reader:
        if egapro_data.get(row["SIREN"]) is None:
            egapro_data[row["SIREN"]] = row
        elif egapro_data[row["SIREN"]]["Année"] < row["Année"]:
            egapro_data[row["SIREN"]].update(row)

class EgaProService(ServiceBase):
    @rpc(Integer, _returns=Unicode)
    def getEgaProData(ctx, siren):
        """
        Retourne les données EgaPro pour un numéro SIREN donné.
        """
        data = egapro_data.get(str(siren))
        if data is None:
            return "SIREN not found"
        return str(data)

application = Application([EgaProService], 'spyne.examples.hello.soap',
                          in_protocol=Soap11(validator='lxml'),
                          out_protocol=Soap11())

wsgi_application = WsgiApplication(application)

# Générer la documentation WSDL
wsdl = application.interface.wsdl

# Écrivez le contenu WSDL dans un fichier ou imprimez-le
with open("egapro_service.wsdl", "w") as f:
    f.write(wsdl.as_xml())

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    server = make_server('0.0.0.0', 8000, wsgi_application)
    server.serve_forever()
